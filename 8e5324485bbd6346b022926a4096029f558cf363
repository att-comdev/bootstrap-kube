{
  "comments": [
    {
      "key": {
        "uuid": "a81b1e84_f008358f",
        "filename": "etc/promenade/api-paste.ini",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-10-20T19:24:55Z",
      "side": 1,
      "message": "This is not defined, I believe you need a section like this above:\n\n[filter:authtoken]\npaste.filter_factory \u003d keystonemiddleware.auth_token:filter_factory",
      "range": {
        "startLine": 22,
        "startChar": 11,
        "endLine": 22,
        "endChar": 20
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaec4e10_916e3106",
        "filename": "promenade/config.py",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-10-20T19:24:55Z",
      "side": 1,
      "message": "Just providing feedback for a future change, this shouldn\u0027t be done unless Promenade is catching an AttributeError and re-raising it as something intelligible.\n\nFor example:\n\n    if schema is not None:\n        raise PromenadeException(\u0027The schema must be None if the kind is not None\u0027)\n\nWhatever the requirements are.",
      "range": {
        "startLine": 149,
        "startChar": 8,
        "endLine": 149,
        "endChar": 29
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f57e2cf6_bdd3c0e5",
        "filename": "promenade/control/base.py",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-10-20T19:24:55Z",
      "side": 1,
      "message": "Easier way to do all this is to just use oslo.context directly which does most of this stuff and then initialize stuff like `self.log_level` and so on yourself.",
      "range": {
        "startLine": 133,
        "startChar": 30,
        "endLine": 133,
        "endChar": 36
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebc623c6_e135bed0",
        "filename": "promenade/control/base.py",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-10-20T19:24:55Z",
      "side": 1,
      "message": "This should be removed. \u0027anyone\u0027 isn\u0027t a role we will ever use. Not only that, we don\u0027t want a default role of \u0027anyone\u0027... this should all be automatically done in the background.",
      "range": {
        "startLine": 141,
        "startChar": 23,
        "endLine": 141,
        "endChar": 29
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dae694d4_ba2e9a01",
        "filename": "promenade/control/middleware.py",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-10-20T19:24:55Z",
      "side": 1,
      "message": "Honestly I know I\u0027m going to get flak for this, but this is not how OpenStack integrates with Keystone. `oslo.context` implicitly does all of this header parsing for you.\n\nI know you got this from Drydock, but this approach does not use a stable API precisely because it does everything manually.",
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9c0b5c1_51ed255c",
        "filename": "promenade/control/middleware.py",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011672
      },
      "writtenOn": "2017-10-20T20:58:45Z",
      "side": 1,
      "message": "I\u0027m fine with using oslo.context either now or later; whichever is easier for Sam to implement.  I find it really surprising that headers modified by keystone middleware are considered an unstable API, though.",
      "parentUuid": "dae694d4_ba2e9a01",
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "459e956e_917ad52a",
        "filename": "promenade/control/middleware.py",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1008770
      },
      "writtenOn": "2017-10-22T03:00:56Z",
      "side": 1,
      "message": "@Felipe - don\u0027t think anyone will flak you for this.  I don\u0027t view this as unstable as much as it is just unnecessary code that doesn\u0027t do anything.  All the process_request is doing is dumping the request\u0027s header into context.  That leads to two questions:\n\n(a) what are we doing with those headers in promenade?  Do we do anything with x-service-user-domain-id in the code? and (b) even if we do care about them, can we just load the entire req.header to the context.   I don\u0027t see value in pecking at the specific headers aside from X-Service-Identity-Status which you might need to inspect to terminate the API flow in case of a 401.",
      "parentUuid": "d9c0b5c1_51ed255c",
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea765a87_bd1a8519",
        "filename": "promenade/control/middleware.py",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-10-20T19:24:55Z",
      "side": 1,
      "message": "I\u0027m guessing this is for testing? If so, should this be included as middleware only conditionally based on a config option?",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 22
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71750fd9_6230bf3c",
        "filename": "promenade/control/middleware.py",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1011672
      },
      "writtenOn": "2017-10-20T20:58:45Z",
      "side": 1,
      "message": "I believe this approach was lifted from Cinder.  The inclusion of this is specified via paste config.",
      "parentUuid": "ea765a87_bd1a8519",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 22
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eea26581_3709672f",
        "filename": "promenade/control/service_endpoints.py",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1008770
      },
      "writtenOn": "2017-10-22T03:00:56Z",
      "side": 1,
      "message": "does promenade need to know the endpoints of deckhand or armada?",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 51,
        "endChar": 60
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18a09e59_fea118b1",
        "filename": "promenade/exceptions.py",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1008770
      },
      "writtenOn": "2017-10-22T03:00:56Z",
      "side": 1,
      "message": "This is likely copy \u0026 paste from shipyard, and I remember raising this before - can we move these utility function to some module !\u003d exceptions.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 34
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10679b64_37c0e0de",
        "filename": "promenade/exceptions.py",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1008770
      },
      "writtenOn": "2017-10-22T03:00:56Z",
      "side": 1,
      "message": "Can be rewritten:\n\n   self.err_type \u003d err_type or self.__class__.err_type",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 181,
        "endChar": 36
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16a5043b_57b08637",
        "filename": "promenade/exceptions.py",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1008770
      },
      "writtenOn": "2017-10-22T03:00:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 186,
        "endChar": 30
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "053529cf_2915d8d3",
        "filename": "promenade/exceptions.py",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1008770
      },
      "writtenOn": "2017-10-22T03:00:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 191,
        "endChar": 32
      },
      "revId": "8e5324485bbd6346b022926a4096029f558cf363",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}