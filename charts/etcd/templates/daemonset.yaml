{{- $envAll := . }}
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ .Values.service.name }}
spec:
  selector:
    matchLabels:
      {{ .Values.service.name | quote }}: server
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
      labels:
        {{ $envAll.Values.service.name | quote }}: server
        {{ $envAll.Values.service.name }}-service: enabled
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        {{ .Values.node_selector.key }}: {{ .Values.node_selector.value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists
      containers:
        - name: etcd
          image: {{ .Values.images.etcd }}
          command:
            - /bin/sh
            - -c
            - |-
              set -ex
              set -o pipefail
              {{- range .Values.nodes }}
              {{- $node := . }}
              {{- if $node.is_initial_node }}
              # NOTE: this configuration is only used by etcd the first time it
              # starts (when it finds no data in /var/etcd).
              if [ "x${ETCD_NAME}" = "x{{ $node.name }}" ]; then
              {{- end }}
              {{- end }}
                  export ETCD_INITIAL_CLUSTER=${ETCD_NAME}=https://${POD_IP}:{{ $envAll.Values.service.target_ports.peer }}
                  export ETCD_INITIAL_CLUSTER_STATE=new
              else
                  # Get ETCDCTL_ENDPOINTS for purpose of joining
                  TEMPORARY_ETCDCTL_ENDPOINTS=$(nslookup {{ $envAll.Values.service.name }}-discovery 2>/dev/null \
                      | grep Address \
                      | grep -v $POD_IP \
                      | awk -F ': ' '{ print "https://" $2 ":{{ $envAll.Values.service.target_ports.client }}" }' \
                      | tr '\n' ',' \
                      | sed 's/,$//')
                  # Get current ETCD_INITIAL_CLUSTER
                  export ETCD_INITIAL_CLUSTER=$(ETCDCTL_ENDPOINTS=$TEMPORARY_ETCDCTL_ENDPOINTS etcdctl member list --write-out simple \
                      | grep -v $POD_IP \
                      | awk -F ', ' '{ print $3 "=" $4 }' \
                      | tr '\n' ',' \
                      | sed "s;\$;$ETCD_NAME=https://$POD_IP:{{ $envAll.Values.service.target_ports.peer }};")
                  export ETCD_INITIAL_CLUSTER_STATE=existing
              fi

              exec etcd

          env:
            - name: ETCD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if .Values.debug }}
            - name: ETCD_DEBUG
              value: 'true'
            {{- end }}
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: https://$(POD_IP):{{ .Values.service.target_ports.client }}
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: https://$(POD_IP):{{ .Values.service.target_ports.peer }}
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: {{ .Values.service.name }}-init-token
            - name: ETCD_STRICT_RECONFIG_CHECK
              value: 'false'
            - name: ETCD_CLIENT_CERT_AUTH
              value: 'true'
            - name: ETCD_PEER_CLIENT_CERT_AUTH
              value: 'true'
            - name: ETCD_LISTEN_CLIENT_URLS
              value: https://0.0.0.0:{{ .Values.service.target_ports.client }}
            - name: ETCD_LISTEN_PEER_URLS
              value: https://0.0.0.0:{{ .Values.service.target_ports.peer }}
            - name: ETCD_DATA_DIR
              value: /var/etcd
            - name: ETCD_TRUSTED_CA_FILE
              value: /etc/etcd/tls/certs/client-ca.pem
            - name: ETCD_CERT_FILE
              value: /etc/etcd/tls/certs/$(ETCD_NAME)-etcd-client.pem
            - name: ETCD_KEY_FILE
              value: /etc/etcd/tls/keys/$(ETCD_NAME)-etcd-client-key.pem
            - name: ETCD_PEER_TRUSTED_CA_FILE
              value: /etc/etcd/tls/certs/peer-ca.pem
            - name: ETCD_PEER_CERT_FILE
              value: /etc/etcd/tls/certs/$(ETCD_NAME)-etcd-peer.pem
            - name: ETCD_PEER_KEY_FILE
              value: /etc/etcd/tls/keys/$(ETCD_NAME)-etcd-peer-key.pem
            - name: ETCDCTL_API
              value: '3'
            - name: ETCDCTL_DIAL_TIMEOUT
              value: 3s
            - name: ETCDCTL_ENDPOINTS
              value: https://$(POD_IP):{{ .Values.service.target_ports.client }},https://127.0.0.1:{{ .Values.service.target_ports.client }}
            - name: ETCDCTL_CACERT
              value: $(ETCD_TRUSTED_CA_FILE)
            - name: ETCDCTL_CERT
              value: $(ETCD_CERT_FILE)
            - name: ETCDCTL_KEY
              value: $(ETCD_KEY_FILE)
          ports:
            - name: client
              containerPort: {{ .Values.service.target_ports.client }}
            - name: peer
              containerPort: {{ .Values.service.target_ports.peer }}
#          livenessProbe:
#            exec:
#              command:
#              - etcdctl
#              - endpoint
#              - health
#            initialDelaySeconds: 120
#            periodSeconds: 60
#            failureThreshold: 3
#          readinessProbe:
#            exec:
#              command:
#              - etcdctl
#              - endpoint
#              - health
#            initialDelaySeconds: 15
#            periodSeconds: 15
          volumeMounts:
            - name: data
              mountPath: /var/etcd
            - name: certs
              mountPath: /etc/etcd/tls/certs
            - name: keys
              mountPath: /etc/etcd/tls/keys
      volumes:
        - name: data
          hostPath:
            path: {{ .Values.host_data_path }}
        - name: certs
          configMap:
            name: {{ .Values.service.name }}
        - name: keys
          secret:
            secretName: {{ .Values.service.name }}
