[tox]
envlist = lint,unit,bandit,docs

[testenv]
basepython=python3

[testenv:unit]
setenv =
  PYTHONWARNING=all
deps = -r{toxinidir}/requirements-frozen.txt
       -r{toxinidir}/test-requirements.txt
commands =
    pytest

[testenv:bandit]
deps = bandit==1.4.0
commands =
    bandit -r promenade

[testenv:docs]
whitelist_externals = rm
deps =
    sphinx>=1.6.2
    sphinx_rtd_theme==0.2.4
    -r{toxinidir}/requirements-frozen.txt
    -r{toxinidir}/test-requirements.txt
commands =
    rm -rf docs/build
    sphinx-build -b html docs/source docs/build

[testenv:fmt]
deps = yapf==0.20.0
commands =
    yapf -ir {toxinidir}/promenade {toxinidir}/tests

[testenv:freeze]
deps = -r{toxinidir}/requirements-direct.txt
recreate = True
whitelist_externals = sh
commands=
    sh -c "pip freeze | grep -v '^promenade' > {toxinidir}/requirements-frozen.txt"

[testenv:gate-lint]
deps =
    jsonschema==2.6.0
whitelist_externals = sh
commands =
    {toxinidir}/tools/lint_gate.sh

[testenv:lint]
deps =
    yapf==0.20.0
    flake8==3.5.0
commands =
    yapf -rd {toxinidir}/promenade {toxinidir}/tests
    flake8 {toxinidir}/promenade

[testenv:coverage]
usedevelop = True
deps = -r{toxinidir}/requirements-frozen.txt
       -r{toxinidir}/test-requirements.txt
commands =
    coverage erase
    coverage run -m pytest
    # This traces the code paths used by the "heat-driven" gate.
    # It does not test the API, which is leveraged by the resiliency gate.
    {toxinidir}/tools/functional-coverage.sh
    coverage combine
    coverage report
